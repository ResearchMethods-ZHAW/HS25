---
lesson: InfoVis1
thema: "Plots & Facets"
---

# Infovis 1: Demo A

```{r}
library("readr")
library("lubridate")
library("dplyr")
library("ggplot2")
library("tidyr")
```

Als erstes laden wir den Datensatz *temperature_SHA_ZER.csv* ein. Es handelt sich dabei um eine leicht modifizierte Variante der Daten aus PrePro1 und PrePro2.

```{r}
# Wir können den Datensatz direkt über die URL einladen oder aber ihr nutzt die
# URL um den Datensatz lokal bei euch abzuspeichern und wie gewohnt einzulesen
temperature <- read_delim("datasets/infovis/temperature_SHA_ZER.csv", ",")
```

```{r}
#| echo: false
#| purl: false

knitr::kable(head(temperature))
```

## Ggplot2

In `ggplot` wird durch den Befehl `ggplot()` initiiert. Hier wird einerseits der Datensatz festgelegt, auf dem der Plot beruht (`data = `), sowie die Variablen innerhalb des Datensatzes, die Einfluss auf den Plot ausüben (`mapping = aes()`). 

```{r}
# Datensatz: "temperature" | Beeinflussende Variabeln: "time" und "temp"
ggplot(data = temperature, mapping = aes(time, SHA))
```

Weiter braucht es *mindestens* ein "Layer", der beschreibt, wie die Daten dargestellt werden sollen (z.B. `geom_point()`).
Anders als bei "Piping" (`|>`) wird ein Layer mit `+` hinzugefügt.

```{r}
ggplot(data = temperature, mapping = aes(time, SHA)) +
  # Layer: "geom_point" entspricht Punkten in einem Scatterplot
  geom_point()
```

Da ggplot die Eingaben in der Reihenfolge `data = ` und dann `mapping = ` erwartet, können wir diese Spezifizierungen auch weglassen.

```{r}
#| eval: false
ggplot(temperature, aes(time, SHA)) +
  geom_point()
```

## Long vs. wide

Wie wir in PrePro 2 bereits erwähnt haben, ist `ggplot2` auf *long tables* ausgelegt. Wir überführen deshalb an dieser Stelle die breite in eine lange Tabelle:

```{r}
temperature_long <- pivot_longer(temperature, -time, names_to = "station", values_to = "temp")
```

Nun wollen wir die Stationen unterschiedlich einfärben. Da wir Variablen definieren wollen, welche Einfluss auf die Grafik haben sollen, gehört diese Information in `aes()`.

```{r}
ggplot(temperature_long, aes(time, temp, colour = station)) +
  geom_point()
```

Wir können noch einen Layer mit Linien hinzufügen:

```{r}
ggplot(temperature_long, aes(time, temp, colour = station)) +
  geom_point() +
  geom_line()
```

## Beschriftungen (labels)

Weiter können wir die Achsen beschriften und einen Titel hinzufügen. Zudem lasse ich die Punkte (`geom_point()`) nun weg, da mir diese nicht gefallen.

```{r}
ggplot(temperature_long, aes(time, temp, colour = station)) +
  geom_line() +
  labs(
    x = "Zeit",
    y = "Temperatur in Grad C°",
    title = "Temperaturdaten Schweiz",
    subtitle = "2001 bis 2002",
    color = "Station"
  )
```

## Split Apply Combine

Im obigen Plot fällt auf, dass stündliche Werte eine zu hohe Auflösung haben, wenn wir die Daten über 2 Jahre visualisieren. Mit *Split Apply Combine* (PrePro 3) können wir die Auflösung unserer Daten verändern: 

```{r}
temperature_day <- temperature_long |>
  mutate(time = as.Date(time))

temperature_day

temperature_day <- temperature_day |>
  group_by(station, time) |>
  summarise(temp = mean(temp))

temperature_day
```

## X/Y-Achse anpassen

Man kann auch Einfluss auf die x-/y-Achsen nehmen. Dabei muss man zuerst festlegen, was für ein Achsentyp der Plot hat (vorher hat `ggplot` eine Annahme auf der Basis der Daten getroffen). 

Bei unserer y-Achse handelt es sich um numerische Daten, `ggplot` nennt diese: `scale_y_continuous()`. Unter [ggplot2.tidyverse.org](http://ggplot2.tidyverse.org/reference/#section-scales) findet man noch andere x/y-Achsentypen (`scale_x_irgenwas` bzw. `scale_y_irgendwas`).

```{r}
ggplot(temperature_day, aes(time, temp, colour = station)) +
  geom_line() +
  labs(
    x = "Zeit",
    y = "Temperatur in Grad C°",
    title = "Temperaturdaten Schweiz",
    subtitle = "2001 bis 2002",
    color = "Station"
  ) +
  scale_y_continuous(limits = c(-30, 30)) # y-Achsenabschnitt bestimmen

```


Das gleiche Spiel kann man für die x-Achse betreiben. Bei unserer x-Achse handelt es sich ja um Datumsangaben. `ggplot` nennt diese: `scale_x_date()`. 

```{r}
ggplot(temperature_day, aes(time, temp, colour = station)) +
  geom_line() +
  labs(
    x = "Zeit",
    y = "Temperatur in Grad C°",
    title = "Temperaturdaten Schweiz",
    subtitle = "2001 bis 2002",
    color = "Station"
  ) +
  scale_y_continuous(limits = c(-30, 30)) +
  scale_x_date(
    date_breaks = "3 months",
    date_labels = "%b"
  )
```


## Facets / Small Multiples

Sehr praktisch sind auch die Funktionen für "Small multiples". Dies erreicht man mit `facet_wrap()` (oder `facet_grid()`, mehr dazu später). Man muss mit einem Tilde-Symbol "`~`" nur festlegen, welche *Variable* für das Aufteilen des Plots in kleinere Subplots verantwortlich sein soll. 

```{r}
ggplot(temperature_day, aes(time, temp, colour = station)) +
  geom_line() +
  labs(
    x = "Zeit",
    y = "Temperatur in Grad C°",
    title = "Temperaturdaten Schweiz",
    subtitle = "2001 bis 2002",
    color = "Station"
  ) +
  scale_y_continuous(limits = c(-30, 30)) +
  scale_x_date(
    date_breaks = "3 months",
    date_labels = "%b"
  ) +
  facet_wrap(~station)
```

Auch `facet_wrap` kann man auf seine Bedürfnisse anpassen: Beispielweise kann man mit `ncol = ` die Anzahl facets pro Zeile bestimmen. 

Zudem brauchen wir die Legende nicht mehr, da der Stationsnamen über jedem Facet steht. Ich setze deshalb `theme(legend.position="none")` 

```{r}
ggplot(temperature_day, aes(time, temp, colour = station)) +
  geom_line() +
  labs(
    x = "Zeit",
    y = "Temperatur in Grad C°",
    title = "Temperaturdaten Schweiz",
    subtitle = "2001 bis 2002"
  ) +
  scale_y_continuous(limits = c(-30, 30)) +
  scale_x_date(
    date_breaks = "3 months",
    date_labels = "%b"
  ) +
  facet_wrap(~station, ncol = 1) +
  theme(legend.position = "none")
```

## Plot exportieren

Folgendermassen kann ich den letzten Plot als png-File abspeichern:

```{r}
#| eval: false

ggsave(filename = "plot.png")
```


