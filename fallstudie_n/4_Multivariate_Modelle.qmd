---
execute:
  echo: true   # set to true to show musterlösung
  output: true # set to true to show musterlösung
code-fold: true
code-summary: "Musterlösung"
knitr:
  opts_chunk: 
    collapse: true
---

# Multivariate Modelle 

Einstieg Multivariate Modelle / Habitatselektionsmodell

## Libraries laden

```{r}
#| echo: true
#| code-fold: false

library("sf")
library("terra")
library("dplyr")
library("readr")
library("ggplot2")
library("PerformanceAnalytics")
library("pastecs")
library("car")
library("psych")

options(scipen = 999)
```

## Aufgabe 1

Einlesen des Gesamtdatensatzes für die Multivariate Analyse von Moodle

1) Sichtung des Datensatzes, der Variablen und der Datentypen
2) Kontrolle wieviele Rehe in diesem Datensatz enthalten sind

```{r}
#| output: false

DF_mod <- read_delim("datasets/fallstudie_n/Aufgabe4_Datensatz_Habitatnutzung_Modelle_241028.csv", delim = ";")

str(DF_mod)

class(DF_mod$time_of_day)

table(DF_mod$id)

DF_mod |>
  group_by(id) |>
  summarize(anzahl = n())

length(unique(DF_mod$id))
```

## Aufgabe 2

Unterteilung des Datensatzes in Teildatensätze entsprechend der Tageszeit 

```{r}
DF_mod_night <- DF_mod |>
  filter(time_of_day == "night")

DF_mod_day <- DF_mod |>
  filter(time_of_day == "day")

# Kontrolle
table(DF_mod_night$time_of_day)

table(DF_mod_day$time_of_day)
```

## Aufgabe 3

Erstellen von Density Plots der Präsenz / Absenz in Abhängigkeit der unabhängigen Variablen. Diese Übung dient einer ersten groben Einschätzung der Wirkung der Umweltvariablen auf die abhängige Variable (Präsenz/Absenz in unserem Fall)

```{r}
#| echo: true
#| code-fold: false

# Ein Satz Density Plots für den Tagesdatensatz und einer für den Nachtdatensatz

par(mfrow = c(3, 3), mar = c(4, 4, 3, 3)) # Vorbereitung Raster für Plots

# innerhalb des for()-loops die Nummern der gewünschten Spalten einstellen

for (i in 5:12) {
  dp <- DF_mod_day |> filter(pres_abs == 1) |> pull(i)
  dp <- density(dp)
  da <- DF_mod_day |> filter(pres_abs == 0) |> pull(i)
  da <- density(da)
  plot(0, 0, type = "l",
    xlim = range(c(dp$x, da$x)),
    ylim = range(dp$y, da$y),
    xlab = names(DF_mod_day[i]),
    ylab = "Density"
  )
  lines(dp$x, dp$y, col = "blue")             # Präsenz = used
  lines(da$x, da$y, col = "red")              # Absenz = available
}
```

## Aufgabe 4

Testen eurer erklärenden Variablen auf Normalverteilung (nur kontinuierliche)

```{r}
# klassischer Weg mit shapiro-wilk (vergl. Stats-Skript der Theorielektionen)
# mehrere Spalten, verschiedenene statistische Kenngrössen werden angezeigt. Normalverteilung: Wert ganz unten. p>0.05 = ja

round(stat.desc(DF_mod_day[5:12], basic = F, norm = T),3)

# empfohlener Weg

ggplot(DF_mod_day, aes(slope)) +
  geom_histogram(aes(y = after_stat(density)), color = "black", fill = "white") +
  stat_function(fun = dnorm, args = list(mean = mean(DF_mod_day$slope, na.rm = T), sd = sd(DF_mod_day$slope, na.rm = T)), color = "black", linewidth = 1)
```

```{r}
# Aufgabe 4: die Verteilung bei einem Teildatensatz zu testen reicht,
# denn die verwendeten Kreise sind die selben am Tag und in der Nacht,
# nur die Nutzung durch das Reh nicht
```

## Aufgabe 5

Explorative Analysen der Variablen mit Scatterplots / Scatterplotmatrizen 

1) Zu Scatterplots und Scatterplotmatrizen gibt es viele verschiedene Funktionen / Packages, schaut im Internet und sucht euch eines welches euch passt.
2) Testen der Korrelation zwischen den Variablen (Parametrisch oder nicht-parametrische Methode? Ausserdem: gewisse Scatterplotmatrizen zeigen euch die Koeffizenten direkt an)

```{r}
pairs.panels(DF_mod_day[5:12],
  method = "pearson", # correlation method
  hist.col = "#00AFBB",
  density = TRUE, # show density plots
  ellipses = TRUE # show correlation ellipses
)

# Aufgabe 5: die Korrelation bei einem Teildatensatz zu testen reicht,
# denn die verwendeten Kreise sind die selben am Tag und in der Nacht,
# nur die Nutzung durch das Reh nicht.
```
