---
lesson: Deskriptive Analysen
thema: Explorativ / Beschreibend
execute: 
  echo: true   # set to true to show musterlösung
  output: false
code-fold: true
code-summary: "Musterlösung"
knitr:
  opts_chunk: 
    collapse: true
---

# Deskriptive Analysen


```{r include=FALSE, echo = FALSE}
# Benoetigte Bibliotheken ####
library("readr") # read data into r
library("ggplot2") # plot nice graphs
library("dplyr") # select data
library("lubridate") # Arbeiten mit Datumsformaten
library("suncalc") # berechne Tageszeiten abhaengig vom Sonnenstand
library("ggpubr") # to arrange multiple plots in one graph
library("PerformanceAnalytics") # Plotte Korrelationsmatrix
library("MuMIn") # Multi-Model Inference
library("AICcmodavg") # Modellaverageing
library("fitdistrplus") # Prueft die Verteilung in Daten
library("lme4") # Multivariate Modelle
library("DHARMa") # Modeldiagnostik
library("blmeco") # Bayesian data analysis using linear models
library("sjPlot") # Plotten von Modellergebnissen (tab_model)
library("lattice") # einfaches plotten von Zusammenhängen zwischen Variablen
library("glmmTMB")# zero-inflated model




# definiere ein farbset zur wiedervewendung
mycolors <- c("orangered", "gold", "mediumvioletred", "darkblue")

# Start und Ende ####
# Untersuchungszeitraum, ich waehle hier alle verfügbaren Daten
depo_start <- as.Date("2017-01-01")
depo_end <- as.Date("2023-12-31")

# Start und Ende Lockdown
# definieren, wichtig fuer die spaeteren Auswertungen
lock_1_start <- as.Date("2020-03-16")
lock_1_end <- as.Date("2020-05-11")

lock_2_start <- as.Date("2020-12-22")
lock_2_end <- as.Date("2021-03-01")

# Ebenfalls muessen die erste und letzte Kalenderwoche der Untersuchungsfrist definiert werden
# Diese werden bei Wochenweisen Analysen ebenfalls ausgeklammert da sie i.d.R. unvollstaendig sind
KW_start <- isoweek(depo_start)
KW_end <- isoweek(depo_end)

# Erster und letzter Tag der Ferien
# je nach Untersuchungsdauer muessen hier weitere oder andere Ferienzeiten ergaenzt werden
# (https://www.schulferien.org/schweiz/ferien/2020/)

# Rule of thumb: Sobald man viele (>5) Objekte mit sehr ähnlichen Namen erstellt, sollte man besser mit Listen oder DataFrames arbeiten
schulferien <- read_delim("datasets/fallstudie_s/ferien.csv", ",")


# .################################################################################################
# 1. DATENIMPORT #####
# .################################################################################################

# Beim Daten einlesen koennen sogleich die Datentypen und erste Bereinigungen vorgenommen werden

# 1.1 Zaehldaten ####
# Die Zaehldaten des Wildnispark wurden vorgaengig bereinigt. z.B. wurden Stundenwerte
# entfernt, an denen am Zaehler Wartungsarbeiten stattgefunden haben.

# lese die Daten ein
# Je nach Bedarf muss der Speicherort sowie der Dateiname angepasst werden
depo <- read_delim("datasets/fallstudie_s/211_sihlwaldstrasse.csv", ";")

# Hinweis zu den Daten:
# In hourly analysis format, the data at 11:00 am corresponds to the counts saved between
# 11:00 am and 12:00 am.

# erstes Sichten und Anpassen der Datentypen
str(depo)

depo <- depo |>
  mutate(
    Datetime = as.POSIXct(as.character(Datetime), format = "%Y%m%d%H", tz = "CET"),
    Datum = as.Date(Datetime)
  )


# In dieser Auswertung werden nur Personen zu Fuss betrachtet!
depo <- depo |>
  # mit select werden spalten ausgewaehlt oder eben fallengelassen
  # (velos interessieren uns in dieser Auswertung nicht und Zeit soll in R immer zusammen mit Datum gespeichert werden)
  dplyr::select(-c(Velo_IN, Velo_OUT)) |>
  # Berechnen des Totals, da dieses in den Daten nicht vorhanden ist
  mutate(Total = Fuss_IN + Fuss_OUT)

# Entferne die NA's in dem df.
depo <- na.omit(depo)

# .################################################################################################

# 1.2 Meteodaten ####
# Einlesen
meteo <- read_delim("datasets/fallstudie_s/order_124839_data.txt", ";")

# Datentypen setzen
# Das Datum wird als Integer erkannt. Zuerst muss es in Text umgewaldelt werden aus dem dann
# das eigentliche Datum herausgelesen werden kann
meteo <- mutate(meteo, time = as.Date(as.character(time), "%Y%m%d"))

# Zeitangaben in UTC: 
#  00:40 UTC = 02:40 Sommerzeit = 01:40 Winterzeit
# Beispiel: 13 = beinhaltet Messperiode von 12:01 bis 13:00
# --> da wir mit Tageshöchstwerten oder -summen rechnen, können wir zum Glück ignorieren, dass das nicht 
# mit den Zähldaten übereinstimmt.

# Die eigentlichen Messwerte sind alle nummerisch
meteo <- meteo |>
  mutate(
    tre200nx = as.numeric(tre200nx),
    tre200jx = as.numeric(tre200jx),
    rre150n0 = as.numeric(rre150n0),
    rre150j0 = as.numeric(rre150j0),
    sremaxdv = as.numeric(sremaxdv)
  ) |>
  filter(time >= depo_start, time <= depo_end) # schneide dann auf Untersuchungsdauer

# Was ist eigentlich Niederschlag:
# https://www.meteoschweiz.admin.ch/home/wetter/wetterbegriffe/niederschlag.html

# Filtere Werte mit NA
meteo <- na.omit(meteo)

# Pruefe ob alles funktioniert hat
str(meteo)
sum(is.na(meteo)) # zeigt die Anzahl NA's im data.frame an


# .################################################################################################
# 2. VORBEREITUNG DER DATEN #####
# .################################################################################################

# 2.1 Convenience Variablen ####


# Wir gruppieren die Meteodaten noch nach Kalenderwoche und Werktag / Wochenende
# Dafür brauchen wir zuerst diese als Convenience Variablen
meteo <- meteo |>
  # wday sortiert die Wochentage automatisch in der richtigen Reihenfolge
  mutate(
    Wochentag = wday(time, week_start = 1),
    Wochentag = factor(Wochentag),
    # Werktag oder Wochenende hinzufuegen
    Wochenende = ifelse(Wochentag %in% c(6, 7), "Wochenende", "Werktag"),
    Wochenende = as.factor(Wochenende),
    # Kalenderwoche hinzufuegen
    KW = isoweek(time),
    KW = factor(KW),
    # monat und Jahr
    Monat = month(time),
    Monat = factor(Monat),
    Jahr = year(time),
    Jahr = factor(Jahr))



depo <- depo |>
  # wday sortiert die Wochentage automatisch in der richtigen Reihenfolge
  mutate(
    Wochentag = wday(Datetime, week_start = 1),
    Wochentag = factor(Wochentag),
    # Werktag oder Wochenende hinzufuegen
    Wochenende = ifelse(Wochentag %in% c(6, 7), "Wochenende", "Werktag"),
    Wochenende = as.factor(Wochenende),
    # Kalenderwoche hinzufuegen
    KW = isoweek(Datetime),
    KW = factor(KW),
    # monat und Jahr
    Monat = month(Datetime),
    Monat = factor(Monat),
    Jahr = year(Datetime),
    Jahr = factor(Jahr))

# Lockdown
# Hinweis: ich mache das nachgelagert, da ich die Erfahrung hatte, dass zu viele
# Operationen in einem Schritt auch schon mal durcheinander erzeugen koennen.
# Hinweis II: Wir packen alle Phasen (normal, die beiden Lockdowns und Covid aber ohne Lockdown)
# in eine Spalte --> long ist schoener als wide
depo <- depo |>
  mutate(Phase = case_when(
    Datetime < lock_1_start ~ "Pre",
    Datetime >= lock_1_start & Datetime <= lock_1_end ~ "Lockdown_1",
    Datetime > lock_1_end & Datetime < lock_2_start ~ "Inter",
    Datetime >= lock_2_start & Datetime <= lock_2_end ~ "Lockdown_2",
    Datetime > lock_2_end ~ "Post"
  ))

# hat das gepklappt?!
unique(depo$Phase)

# in welchen KW war der Lockdown?
KW_lock_1_start <- isoweek(min(depo$Datum[depo$Phase == "Lockdown_1"]))
KW_lock_1_ende <- isoweek(max(depo$Datum[depo$Phase == "Lockdown_1"]))

depo <- depo |>
  # mit factor() koennen die levels direkt einfach selbst definiert werden.
  # wichtig: speizfizieren, dass aus R base, ansonsten kommt es zu einem
  # mix-up mit anderen packages
  mutate(Phase = base::factor(Phase, levels = c("Pre", "Lockdown_1", "Inter", "Lockdown_2", "Post")))

str(depo)

#Schulferien
# schreibe nun eine Funktion zur zuweisung Ferien. WENN groesser als start UND kleiner als
# ende, DANN schreibe ein 1
for (i in 1:nrow(schulferien)) {
  depo$Ferien[depo$Datum >= schulferien[i, "Start"] & depo$Datum <= schulferien[i, "Ende"]] <- 1
}
depo$Ferien[is.na(depo$Ferien)] <- 0

# als faktor speichern
depo$Ferien <- factor(depo$Ferien)


# Fuer einige Auswertungen muss auf die Stunden als nummerischer Wert zurueckgegriffen werden
depo$Stunde <- hour(depo$Datetime)
# hour gibt uns den integer
typeof(depo$Stunde)

# Die Daten wurden kalibriert. Wir runden sie fuer unserer Analysen auf Ganzzahlen
depo$Total <- as.integer(round(depo$Total, digits = 0))
depo$Fuss_IN <- as.integer(round(depo$Fuss_IN, digits = 0))
depo$Fuss_OUT <- as.integer(round(depo$Fuss_OUT, digits = 0))

# 2.2 Tageszeit hinzufuegen ####

# Einteilung Standort Zuerich
Latitude <- 47.38598
Longitude <- 8.50806

# Start und das Ende der Sommerzeit:
# https://www.schulferien.org/schweiz/zeit/zeitumstellung/


# Welche Zeitzone haben wir eigentlich?
# Switzerland uses Central European Time (CET) during the winter as standard time,
# which is one hour ahead of Coordinated Universal Time (UTC+01:00), and
# Central European Summer Time (CEST) during the summer as daylight saving time,
# which is two hours ahead of Coordinated Universal Time (UTC+02:00).
# https://en.wikipedia.org/wiki/Time_in_Switzerland

# Was sind Astronomische Dämmerung und Golden Hour ueberhaupt?
# https://sunrisesunset.de/sonne/schweiz/zurich-kreis-1-city/
# https://www.rdocumentation.org/packages/suncalc/versions/0.5.0/topics/getSunlightTimes

# Wir arbeiten mit folgenden Variablen:
# "nightEnd" : night ends (morning astronomical twilight starts)
# "goldenHourEnd" : morning golden hour (soft light, best time for photography) ends
# "goldenHour" : evening golden hour starts
# "night" : night starts (dark enough for astronomical observations)

lumidata <-
  getSunlightTimes(
    date = seq.Date(depo_start, depo_end, by = 1),
    keep = c("nightEnd", "goldenHourEnd", "goldenHour", "night"),
    lat = Latitude,
    lon = Longitude,
    tz = "CET"
  ) |>
  as_tibble()

# jetzt haben wir alle noetigen Angaben zu Sonnenaufgang, Tageslaenge usw.
# diese Angaben koennen wir nun mit unseren Zaehldaten verbinden:
depo <- depo |>
  left_join(lumidata, by = c(Datum = "date"))

# im naechsten Schritt weise ich den Stunden die Tageszeiten Morgen, Tag, Abend und Nacht zu.
# diese Zuweisung basiert auf der Einteilung gem. suncalc und eigener Definition.
depo <- depo |>
  mutate(Tageszeit = case_when(
    Datetime >= nightEnd & Datetime <= goldenHourEnd ~ "Morgen",
    Datetime > goldenHourEnd & Datetime < goldenHour ~ "Tag",
    Datetime >= goldenHour & Datetime <= night ~ "Abend",
    .default = "Nacht"
  )) |>
  mutate(Tageszeit = factor(Tageszeit, levels = c("Morgen", "Tag", "Abend", "Nacht"), ordered = TRUE))


# behalte die relevanten Var
depo <- depo |> dplyr::select(-nightEnd, -goldenHourEnd, -goldenHour, -night, -lat, -lon)

# Plotte zum pruefn ob das funktioniert hat
ggplot(depo, aes(y = Datetime, color = Tageszeit, x = Stunde)) +
  geom_jitter() +
  scale_color_manual(values = mycolors)

sum(is.na(depo))

# bei mir hat der Zusatz der Tageszeit noch zu einigen NA-Wertren gefueht.
# Diese loesche ich einfach:
depo <- na.omit(depo)
# hat das funktioniert?
sum(is.na(depo))


# 2.4 Aggregierung der Stundendaten zu ganzen Tagen ####
# Zur Berechnung von Kennwerten ist es hilfreich, wenn neben den Stundendaten auch auf Ganztagesdaten
# zurueckgegriffen werden kann
# hier werden also pro Nutzergruppe und Richtung die Stundenwerte pro Tag aufsummiert.
# Convenience Variablen nehme ich hier bewusst aus der Gruppierung - zu komplexe Operationen
# könne zu Fehlern in der Gruppierung führen.
depo_d <- depo |>
  group_by(Datum) |>
  summarise(
    Total = sum(Fuss_IN + Fuss_OUT),
    Fuss_IN = sum(Fuss_IN),
    Fuss_OUT = sum(Fuss_OUT)
  )|>
  # Berechne die Anzahl Tage bis Neujahr, wir brauchen sie später in den Modellen
  mutate(Tage_bis_Neujahr = as.numeric(difftime(ymd(paste0(year(Datum), "-12-31")), Datum, units = "days")))

# und noch die convenience var. gem oben hinzufuegen
depo_d <- depo_d |>
  mutate(
  Wochentag = wday(Datum, week_start = 1),
  Wochentag = factor(Wochentag),
  # Werktag oder Wochenende hinzufuegen
  Wochenende = ifelse(Wochentag %in% c(6, 7), "Wochenende", "Werktag"),
  Wochenende = as.factor(Wochenende),
  # Kalenderwoche hinzufuegen
  KW = isoweek(Datum),
  KW = factor(KW),
  # monat und Jahr
  Monat = month(Datum),
  Monat = factor(Monat),
  Jahr = year(Datum),
  Jahr = factor(Jahr))

depo_d <- depo_d |>
  mutate(Phase = case_when(
    Datum < lock_1_start ~ "Pre",
    Datum >= lock_1_start & Datum <= lock_1_end ~ "Lockdown_1",
    Datum > lock_1_end & Datum < lock_2_start ~ "Inter",
    Datum >= lock_2_start & Datum <= lock_2_end ~ "Lockdown_2",
    Datum > lock_2_end ~ "Post"
  ))

depo_d <- depo_d |>
  mutate(Phase = base::factor(Phase, levels = c("Pre", "Lockdown_1", "Inter", "Lockdown_2", "Post")))

for (i in 1:nrow(schulferien)) {
  depo_d$Ferien[depo_d$Datum >= schulferien[i, "Start"] & depo_d$Datum <= schulferien[i, "Ende"]] <- 1
}
depo_d$Ferien[is.na(depo_d$Ferien)] <- 0

depo_d$Ferien <- factor(depo_d$Ferien)





# nun gruppieren wir nicht nach Tag sondern v.a. nach Tageszeit
# Das Datum schliessen wir aus dieser Gruppierung aus, denn wenn wir es drin hätten,
# würde dieselbe "Nacht" jeweils zwei Einträge generieren (da sie über zwei Daten geht).
# Mit dieser Gruppierung haben wir jeweils eine Summe pro Tageszeit für alle Werktage einer Woche zusammen
# und beide Wochenendtage
depo_daytime <- depo |>
  group_by(Jahr, Monat, KW, Phase, Ferien, Wochenende, Tageszeit) |>
  summarise(
    Total = sum(Fuss_IN + Fuss_OUT),
    Fuss_IN = sum(Fuss_IN),
    Fuss_OUT = sum(Fuss_OUT)) 

# mean besser Vergleichbar, da Zeitreihen unterschiedlich lange
mean_phase_d <- depo_daytime |>
  group_by(Phase, Tageszeit) |>
  summarise(
    Total = mean(Total),
    IN = mean(Fuss_IN),
    OUT = mean(Fuss_OUT))


# Gruppiere die Werte nach Monat
depo_m <- depo |>
  group_by(Jahr, Monat) |>
  summarise(Total = sum(Total))

depo_m <- depo_m |>
  mutate(
    Ym = paste(Jahr, Monat), # und mache eine neue Spalte, in der Jahr und
    Ym = lubridate::ym(Ym)
  ) # formatiere als Datum


# Gruppiere die Werte nach Monat und TAGESZEIT
depo_m_daytime <- depo |>
  group_by(Jahr, Monat, Tageszeit) |>
  summarise(Total = sum(Total))
# sortiere das df aufsteigend (nur das es sicher stimmt)
depo_m_daytime <- depo_m_daytime |>
  mutate(
    Ym = paste(Jahr, Monat), # und mache eine neue Spalte, in der Jahr und
    Ym = lubridate::ym(Ym)
  ) # formatiere als Datum
```

## Aufgabe 1: Verlauf der Besuchszahlen nach Monat

### 1a)


Nachdem wir die Projektstruktur aufgebaut haben und die Daten vorbereitet (inkl. aggregiert) sind, machen wir uns an die deskriptive Analyse. Dies macht immer Sinn. Bevor mach sich an die schliessende Statistik macht, muss man ein "Gefühl" für die Daten bekommen. Dies funktioniert am einfachsten mit explorativen Analysen.

Wir interessieren uns in den Analysen für 5 Zeitabschnitte:

1. von Anfang Untersuchungsperiode bis vor dem 1. Lockdown (pre)
2. Lockdown 1
3. Zwischen beiden Lockdowns
4. Lockdown 2
5. Ende 2. Lockdown bis Ende Untersuchungsperiode

Und dabei immer auch für die verschiedenen Tageszeiten (Morgen, Tag, Abend, Nacht).

- Plottet den Verlauf der monatlichen Besuchszahlen an eurer Zählstelle. 
- Auf der x-Achse steht dabei dabei Jahr und Monat (gespeichert im df _depo_m_), auf der y-Achse die monatlichen Besuchszahlen. 
- Zeichnet auch die beiden Lockdown ein (Hinweis: rundet das Start- und Enddatum der Lockdowns auf den Monat, da im Plot die monatlichen Zahlen gezeigt werden).

Haltet euch dabei an untenstehenden Plot:

```{r echo=FALSE, output = TRUE}
ggplot(depo_m, mapping = aes(Ym, Total, group = 1)) + # group = 1 braucht R, dass aus den Einzelpunkten ein Zusammenhang hergestellt wird
  # zeichne Lockdown 1
  geom_rect(
    mapping = aes(
      xmin = ym("2020-3"), xmax = ym("2020-5"),
      ymin = 0, ymax = max(Total + (Total / 100 * 10))),
    fill = "lightskyblue", alpha = 0.2, colour = NA) +
  # zeichne Lockdown 2
  geom_rect(
    mapping = aes(
      xmin = ym("2020-12"), xmax = ym("2021-3"),
      ymin = 0, ymax = max(Total + (Total / 100 * 10))),
    fill = "darkolivegreen2", alpha = 0.2, colour = NA) +
  geom_line(alpha = 0.6, linewidth = 1) +
  scale_x_date(date_labels = "%b%y", date_breaks = "6 months") +
  labs(title = "", y = "Fussgänger:innen pro Monat", x = "Jahr") +
  theme_classic(base_size = 15) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
```

```{r}
ggplot(depo_m, mapping = aes(Ym, Total, group = 1)) + # group = 1 braucht R, dass aus den Einzelpunkten ein Zusammenhang hergestellt wird
  # zeichne Lockdown 1
  geom_rect(
    mapping = aes(
      xmin = ym("2020-3"), xmax = ym("2020-5"),
      ymin = 0, ymax = max(Total + (Total / 100 * 10))),
    fill = "lightskyblue", alpha = 0.2, colour = NA) +
  # zeichne Lockdown 2
  geom_rect(
    mapping = aes(
      xmin = ym("2020-12"), xmax = ym("2021-3"),
      ymin = 0, ymax = max(Total + (Total / 100 * 10))),
    fill = "darkolivegreen2", alpha = 0.2, colour = NA) +
  geom_line(alpha = 0.6, linewidth = 1) +
  scale_x_date(date_labels = "%b%y", date_breaks = "6 months") +
  labs(title = "", y = "Fussgänger:innen pro Monat", x = "Jahr") +
  theme_classic(base_size = 15) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
```

__Hinweis:__ 
- Nutzt zum plotten __ggplot()__
- folgende Codeschnipsel helfen euch:

```{r echo = TRUE, eval=FALSE}
ggplot(data = depo_m, mapping = aes(Ym, Total, group = 1)) + # group 1 braucht R, dass aus den Einzelpunkten ein Zusammenhang hergestellt wird
    # zeichne Lockdown 1; ein einfaches Rechteck. bestimme mit min und max die Dimensionen
  geom_rect(
    mapping = aes(
      xmin = ym("2020-3"), xmax = ym("2020-5"),
      ymin = 0, ymax = max(Total + (Total / 100 * 10))
    ), # das Rechteck soll 10 % grösser als die maximale Besuchszahl sein
    fill = "lightskyblue", alpha = 0.2, colour = NA
  ) +
  # zeichne Lockdown 2
  ... +
  # zeichne die Linie
  geom_line(...) +
  scale_x_date(...)+
  theme_linedraw(base_size = 15) +
  ...
```

- Exportiert euren Plot mit __ggsave()__ nach __results__. Breite = 20, Höhe = 10, Einheiten = cm, dpi = 1000

### 1b)

Der erste Plot zeigt, wie sich die Besuchszahlen allgemein entwickelt haben. Interessant ist aber auch, wie sie während den einzelnen Monaten zueinander stehen (z.B. "Waren im Mai 2020 mehr Menschen unterwegs als im Mai 2017?"). Dies zeigt folgender Plot:

```{r echo=FALSE, output = TRUE}
ggplot(depo_m, aes(Monat, Total, group = Jahr, color = Jahr, linetype = Jahr)) +
  geom_line(size = 2) +
  geom_point() +
  scale_colour_viridis_d() +
  scale_linetype_manual(values = c(rep("solid", 3), "twodash", "twodash", "solid", "solid")) +
  scale_x_discrete(breaks = c(seq(0, 12, by = 1))) +
  geom_vline(xintercept = c(seq(1, 12, by = 1)), linetype = "dashed", color = "gray") +
  labs(title = "", y = "Fussgänger:innen pro Monat", x = "Monat") +
  theme_classic(base_size = 15) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
```

```{r}
ggplot(depo_m, aes(Monat, Total, group = Jahr, color = Jahr, linetype = Jahr)) +
  geom_line(size = 2) +
  geom_point() +
  scale_colour_viridis_d() +
  scale_linetype_manual(values = c(rep("solid", 3), "twodash", "twodash", "solid", "solid")) +
  scale_x_discrete(breaks = c(seq(0, 12, by = 1))) +
  geom_vline(xintercept = c(seq(1, 12, by = 1)), linetype = "dashed", color = "gray") +
  labs(title = "", y = "Fussgänger:innen pro Monat", x = "Monat") +
  theme_classic(base_size = 15) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
```

- Erstellt diesen Plot und speichert ihn.

__Hinweis:__ Dieser Plot wird erstellt mit dem Argument _group_, _linetype_ und _color_ innerhalb des _aes()__ Arguments. __geom_line()__ wiederum zeichnet die Linien.


### 1c)

Unser Fokus liegt auf der dunklen Tageszeit. Wie verteilen sich die Besuchenden also auf Morgen, Tag, Abend und Nacht?

- Erstellt und speichert folgenden Plot:

```{r echo=FALSE, output = TRUE}
ggplot(depo_m_daytime, aes(Ym, Total, fill = Tageszeit)) +
  geom_area(position = "fill", alpha = 0.8) +
  scale_fill_manual(values = mycolors) +
  scale_x_date(date_labels = "%b%y", date_breaks = "6 months", 
               limits = c(min(depo_m_daytime$Ym), max = max(depo_m_daytime$Ym)), expand = c(0, 0)) +
  geom_vline(xintercept = seq(as.Date(min(depo_m_daytime$Ym)), as.Date(max(depo_m_daytime$Ym)), 
                              by = "6 months"), linetype = "dashed", color = "black")+
  theme_classic(base_size = 15) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), 
        legend.position = "bottom") +
  labs(title = "", y = "Verteilung Fussgänger:innen / Monat [%]", x = "Jahr")
```

```{r}
ggplot(depo_m_daytime, aes(Ym, Total, fill = Tageszeit)) +
  geom_area(position = "fill", alpha = 0.8) +
  scale_fill_manual(values = mycolors) +
  scale_x_date(date_labels = "%b%y", date_breaks = "6 months", 
               limits = c(min(depo_m_daytime$Ym), max = max(depo_m_daytime$Ym)), expand = c(0, 0)) +
  geom_vline(xintercept = seq(as.Date(min(depo_m_daytime$Ym)), as.Date(max(depo_m_daytime$Ym)), 
                              by = "6 months"), linetype = "dashed", color = "black")+
  theme_classic(base_size = 15) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), 
        legend.position = "bottom") +
  labs(title = "", y = "Verteilung Fussgänger:innen / Monat [%]", x = "Jahr")
```

Diese Codeschnipsel helfen euch:

```{r eval=FALSE, echo=TRUE}
ggplot(depo_m_daytime, aes(Ym, Total, fill = Tageszeit)) +
  geom_area(...) +
  scale_x_date(date_labels = "%b%y", date_breaks = "6 months", 
               limits = c(min(depo_m_daytime$Ym), max = max(depo_m_daytime$Ym)), expand = c(0, 0)) +
  geom_vline(xintercept = seq(as.Date(min(depo_m_daytime$Ym)), as.Date(max(depo_m_daytime$Ym)), 
                              by = "6 months"), linetype = "dashed", color = "black")+
  ...
```



## Aufgabe 2: Wochengang

Nun möchten wir genauer untersuchen, wie sich die Besuchszahlen je nach Phase (Pre, Lockdown 1, Inter, Lockdown 2 und Post) auf die __Wochentage und Tageszeiten__ verteilen. 


### 2a)

- Erstellt dazu einen Violinplot nach untenstehender Vorgabe. Was sagt uns dieser komplexe Plot?

```{r echo=FALSE, output = TRUE}
ggplot(data = depo, aes(x = Wochentag, y = Total, fill = Tageszeit)) +
  geom_violin(alpha = 0.5) +
  labs(title = "", y = "Fussgänger:innen pro Tag [log10]") +
  facet_grid(cols = vars(Tageszeit), rows = vars(Phase))+
  scale_y_log10()+
  scale_fill_manual(values = mycolors) +
  theme_classic(base_size = 15) +
  theme(
    panel.background = element_rect(fill = NA, color = "black"),
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
    legend.title = element_blank(), 
    legend.position = "none")
```

```{r}
ggplot(data = depo, aes(x = Wochentag, y = Total, fill = Tageszeit)) +
  geom_violin(alpha = 0.5) +
  labs(title = "", y = "Fussgänger:innen pro Tag [log10]") +
  facet_grid(cols = vars(Tageszeit), rows = vars(Phase))+
  scale_y_log10()+
  scale_fill_manual(values = mycolors) +
  theme_classic(base_size = 15) +
  theme(
    panel.background = element_rect(fill = NA, color = "black"),
    axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
    legend.title = element_blank(), 
    legend.position = "none")
```

__Hinweis:__ 

- Nutzt zum plotten __ggplot()__
- folgende Codeschnipsel helfen euch:

```{r eval=FALSE, echo=TRUE}
ggplot(data = depo, aes(x = Wochentag, y = Total, fill = Tageszeit)) +
  geom_violin() +
  facet_grid(cols = vars(...), rows = vars(...))+
  scale_y_log10()+ 
  ...
```

- Warum macht es Sinn, hier die y-Achse zu logarithmieren?
- Gibt es alternative Darstellungsformen, welche besser geeignet wären?
- Exportiert auch diesen Plot mit __ggsave()__. Welche Breite und Höhe passt hier?


## Aufgabe 3: Tagesgang

Von der Übersicht ins Detail. Jetzt widmen wir uns dem Tagesgang, das heisst der Verteilung der Besuchenden auf die 24 Tagesstunden je nach Phase.

### 3a)

- Berechnet zuerst den Mittelwert der totalen Besuchszahlen __pro Wochentag, pro Stunde pro Phase__ und speichert das df unter __Mean_h__.

```{r}
Mean_h <- depo |>
  group_by(Wochentag, Stunde, Phase) |>
  summarise(Total = mean(Total))
```

Vergewissert euch vor dem Plotten, dass der Datensatz im long-Format vorliegt.

### 3b)

- Plottet den Tagesgang, unterteilt nach den 7 Wochentagen nun für die verschiedenen Phasen.

```{r echo=FALSE, output = TRUE} 
ggplot(Mean_h, aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag)) +
  geom_line(size = 1) +
  scale_colour_viridis_d() +
  scale_linetype_manual(values = c(rep("solid", 5), "twodash", "twodash")) +
  scale_x_continuous(breaks = c(seq(0, 23, by = 1)), labels = c(seq(0, 23, by = 1))) +
  facet_grid(rows = vars(Phase)) +
  labs(x = "Uhrzeit [h]", y = "Durchscnnitt Fussganger_Innen / h", title = "") +
  lims(y = c(0, 25)) +
  theme_linedraw(base_size = 15) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
```

```{r}
ggplot(Mean_h, aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag)) +
  geom_line(size = 1) +
  scale_colour_viridis_d() +
  scale_linetype_manual(values = c(rep("solid", 5), "twodash", "twodash")) +
  scale_x_continuous(breaks = c(seq(0, 23, by = 1)), labels = c(seq(0, 23, by = 1))) +
  facet_grid(rows = vars(Phase)) +
  labs(x = "Uhrzeit [h]", y = "Durchscnnitt Fussganger_Innen / h", title = "") +
  lims(y = c(0, 25)) +
  theme_linedraw(base_size = 15) +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
```

__Hinweis:__ 
- Nutzt zum plotten __ggplot()__
- folgende Codeschnipsel helfen euch:

```{r eval=FALSE, echo=TRUE}
ggplot(Mean_h, aes(x = Stunde, y = Total, colour = Wochentag, linetype = Wochentag)) +
  geom_line(...) +
  facet_grid(...)
...
```

## Aufgabe 4: Kennzahlen

Bis hier hin haben wir in diesem Kapitel v.a. visuell gearbeitet. Für den Bericht kann es aber sinnvoll sein, auch einige Kennzahlen in der Hinterhand zu haben. Wir haben das bereits im Kapitel [Datenverarbeitung] berechnet. 

- Reflektiert, welche Zahlen ihr habt und was für den Bericht spannend sein könnte, resp. eure Abbildungen unterstützen oder ergänzen.

